package com.ezen.book.controller;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.ezen.book.domain.MemberVO;
import com.ezen.book.service.MemberService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/mem/*")
@Controller
public class MemberController {

	@Inject
	private MemberService msv;

	@GetMapping({"loginPage","login-member"})
	public String loginPage() {
		return "/member/login";
	}
	@GetMapping("login-Non-member")
	public String loginNonPage() {
		return "/member/login-non";
	}

	@GetMapping("joinPage")
	public String joinPage() {
		return "/member/join";
	}

	@PostMapping("/join")
	public String join(MemberVO mvo, RedirectAttributes reAttr, HttpServletRequest req) {
		log.info(">>> member join check 1");
		boolean isUp = msv.join(mvo);
		if (!isUp) {
			return "redirect:/member/join";
		}
		log.info("우편번호 "+mvo.getMem_postzip());
		//마지막에 가입한 아이디의 주소 업데이트 하기
		String address = req.getParameter("address");
		String detailAddress = req.getParameter("detailAddress");
		String extraAddress = req.getParameter("extraAddress");
		
		String mem_ad = address+" "+detailAddress+" "+extraAddress;
		log.info("addressAll : "+mem_ad);
		int isOk = msv.update(mem_ad);
		log.info(isOk>0?"주소 업데이트 성공":"주소 업데이트 실패");
		log.info(">>> member join 성공");
		return "redirect:/";
	}

	@PostMapping("/login")
	public String login(MemberVO mvo, RedirectAttributes reAttr, HttpServletRequest req) {
		MemberVO mvo2 = msv.login(mvo.getMem_id(), mvo.getMem_pw());
		log.info("login getMem_id : "+mvo.getMem_id());
		log.info("login getMem_pw : "+mvo.getMem_pw());
		if (mvo2 != null) {
			HttpSession ses = req.getSession();
			ses.setAttribute("ses", mvo2);
			ses.setMaxInactiveInterval(60*10);
			return "redirect:/";
		} else {
			reAttr.addFlashAttribute("msg", "0");
			return "redirect:/layout/header";
		}

	}

	@GetMapping("/logOut")
	public String logout(Model model, HttpServletRequest req, RedirectAttributes reAttr) {
		req.getSession().removeAttribute("ses");
		req.getSession().invalidate();
		
		return "redirect:/";

	}
	
	@GetMapping("/naverApi")
	public String naverApiPage() {
		return "/member/naverlogin";
	}
	@GetMapping("/callback")
	public String naverApiCallback() {
		return "/member/callback";
	}
	@GetMapping("/mypage")
		public String mypage() {
			return "/member/mypage";
	}
	
	@GetMapping("/modify")
	public String modify(MemberVO mvo,Model mo,HttpServletRequest req,RedirectAttributes reAttr) {
		
		/*
		 * HttpSession ses = req.getSession(); mo.addAttribute("ses", mvo);
		 */
		
		return "/member/modify";
	}
	@PostMapping("/modify")
	public  String modifyPost(MemberVO mvo) {		
		log.info("modify>>>"+mvo.toString());
		int isUp=msv.usermodify(mvo);
		log.info(">>>modify:"+(isUp>0?"ok":"fail"));
		return "redirect:/";
	}
	
	@GetMapping("join-ts")
	public String joinTs(){
		return "/member/join-ts";
	}
	@GetMapping("MemIdSearch")
	public String MemIdSearch(){
		return "/member/MemIdSearch";
	}
	@GetMapping("MemPwSearch")
	public String MemPwSearch(){
		return "/member/MemPwSearch";
	}
	@PostMapping("MemIdSearch")
	public String MemIdSearch(MemberVO mvo,Model model,RedirectAttributes reAttr) {
		log.info("mvo.getMem_name : "+mvo.getMem_name());
		log.info("mvo.getMem_cell_num : "+mvo.getMem_cell_num());
		String id = msv.getId(mvo);
		log.info(id);
		if(id !=null) {
			/* model.addAttribute("msg", id); */
			 reAttr.addFlashAttribute("msg", id);
		}else {
			/* model.addAttribute("msg", "0"); */
			reAttr.addFlashAttribute("msg", "0");
		}
		return "redirect:/mem/MemIdSearch";
	}
	@PostMapping("MemPwSearch")
	public String MemPwSearch(MemberVO mvo,Model model,RedirectAttributes reAttr) {
		log.info("mvo.getMem_id : "+mvo.getMem_id());
		log.info("mvo.getMem_name : "+mvo.getMem_name());
		log.info("mvo.getMem_cell_num : "+mvo.getMem_cell_num());
		
		String pw = msv.getPw(mvo);

		if(pw !=null) {
			//id,name,cellNum이 맞으면 새 비밀번호 입력 요청 페이지로 이동
			//id도 같이 보내기
			 reAttr.addFlashAttribute("mem_id", mvo.getMem_id());
			 return "/member/memNewPw";
		}else {
			/* model.addAttribute("msg", "0"); */
			reAttr.addFlashAttribute("msg", "0");
			return "redirect:/mem/MemPwSearch";
		}
	}
	@PostMapping("newPwUpdate")
	public String memNewPw(HttpServletRequest req) {
		String mem_id = req.getParameter("mem_id");
		String newPw = req.getParameter("mem_newPw");
		String newPwRe = req.getParameter("mem_newPwRe");
		log.info("아이디,새비번,새비번확인 : "+mem_id,mem_newPw,mem_newPwRe);
		
		int isOk = msv.newPwUpdate(mem_id,newPw, newPwRe);
		return "redirect:/";
	}
}
